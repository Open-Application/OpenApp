/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 5 "ffi.go"

#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

// Callback function types for PlatformInterface
typedef void (*WriteLogFunc)(const char* message);
typedef int32_t (*FindConnectionOwnerFunc)(int32_t ipProtocol, const char* sourceAddress, int32_t sourcePort, const char* destinationAddress, int32_t destinationPort);
typedef char* (*PackageNameByUidFunc)(int32_t uid);
typedef int32_t (*UidByPackageNameFunc)(const char* packageName);
typedef void (*InterfaceUpdateFunc)(const char* interfaceName, int32_t interfaceIndex, int32_t isExpensive, int32_t isConstrained);

// PlatformInterface struct matching librcc.PlatformInterface
typedef struct {
    WriteLogFunc writeLog;
    FindConnectionOwnerFunc findConnectionOwner;
    PackageNameByUidFunc packageNameByUid;
    UidByPackageNameFunc uidByPackageName;
    InterfaceUpdateFunc interfaceUpdate;
} PlatformInterface;

// Helper functions to call function pointers from Go
static inline void call_writeLog(WriteLogFunc func, const char* message) {
    if (func != NULL) {
        func(message);
    }
}

static inline int32_t call_findConnectionOwner(FindConnectionOwnerFunc func, int32_t ipProtocol, const char* sourceAddress, int32_t sourcePort, const char* destinationAddress, int32_t destinationPort) {
    if (func != NULL) {
        return func(ipProtocol, sourceAddress, sourcePort, destinationAddress, destinationPort);
    }
    return -1;
}

static inline char* call_packageNameByUid(PackageNameByUidFunc func, int32_t uid) {
    if (func != NULL) {
        return func(uid);
    }
    return NULL;
}

static inline int32_t call_uidByPackageName(UidByPackageNameFunc func, const char* packageName) {
    if (func != NULL) {
        return func(packageName);
    }
    return -1;
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void FreeString(char* str);
extern __declspec(dllexport) void FreeBytes(char* data);
extern __declspec(dllexport) char* Setup(char* basePath, char* workingPath, char* tempPath, int isTVOS, int fixAndroidStack);
extern __declspec(dllexport) void SetMemoryLimit(int enabled);
extern __declspec(dllexport) void SetLocale(char* localeId);
extern __declspec(dllexport) void ClearServiceError(void);
extern __declspec(dllexport) char* ReadServiceError(char** errorOut);
extern __declspec(dllexport) char* WriteServiceError(char* message);
extern __declspec(dllexport) char* RedirectStderr(char* path);
extern __declspec(dllexport) char* Version(void);
extern __declspec(dllexport) char* CheckConfig(char* configContent);
extern __declspec(dllexport) char* FormatConfig(char* configContent, char** formattedOut);
extern __declspec(dllexport) char* LibrccGetLastError(void);
extern __declspec(dllexport) int64_t NewService(char* configContent, PlatformInterface* platformInterface);
extern __declspec(dllexport) char* ServiceStart(int64_t serviceID);
extern __declspec(dllexport) char* ServiceClose(int64_t serviceID);
extern __declspec(dllexport) void ServicePause(int64_t serviceID);
extern __declspec(dllexport) void ServiceWake(int64_t serviceID);
extern __declspec(dllexport) char ServiceNeedWIFIState(int64_t serviceID);

#ifdef __cplusplus
}
#endif
