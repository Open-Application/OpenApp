name: build-windows

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: 'App name'
      pkg:
        required: true
        type: string
        description: 'Package name'
      version:
        required: true
        type: string
        description: 'Version to build'

jobs:
  build-windows-app:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Clean build artifacts
        shell: bash
        run: |
          rm -rf build windows/.Dart_tool .dart_tool
          echo "Cleaned build artifacts for fresh amd64 build"

      - name: Download Deps lib
        shell: bash
        run: |
          set -xeuo pipefail

          LATEST_RELEASE=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" https://api.github.com/repos/${{ secrets.UPSTREAM_REPO }}/releases/latest | grep '"tag_name":' | cut -d'"' -f4)

          if [ -z "${LATEST_RELEASE}" ]; then
            echo "Error: Failed to fetch latest release tag"
            exit 1
          fi

          echo "Latest OpenCore release: ${LATEST_RELEASE}"

          DOWNLOAD_URL="https://github.com/${{ secrets.UPSTREAM_REPO }}/releases/download/${LATEST_RELEASE}/liboc-windows-amd64-${LATEST_RELEASE}.zip"
          echo "Downloading from: ${DOWNLOAD_URL}"

          curl -L -H "Authorization: Bearer ${GITHUB_TOKEN}" -o liboc.zip "${DOWNLOAD_URL}"
          mkdir -p windows/
          unzip -o liboc.zip -d windows/

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Set build environment
        shell: bash
        run: |
          set -xeuo pipefail
          echo "BUILD_VERSION=${{ inputs.version }}" >> "${GITHUB_ENV}"

      - name: Install Flutter dependencies
        shell: bash
        run: |
          flutter pub get

      - name: Check Flutter version
        shell: bash
        run: |
          flutter --version

      - name: Enable Windows desktop
        shell: bash
        run: |
          flutter config --enable-windows-desktop

      - name: Build Windows app
        shell: bash
        run: |
          set -xeuo pipefail

          echo "Building ${{ inputs.name }} ${{ inputs.version }} (Release Mode)"

          flutter build windows --release \
            --obfuscate \
            --split-debug-info=debug-info/windows-amd64 \
            --suppress-analytics \
            --no-tree-shake-icons

          echo "Verifying build output:"
          ls -lh build/windows
          ls -lh build/windows/x64/runner/Release/

      - name: Build MSIX package(Store)
        shell: bash
        run: |
          set -xeuo pipefail

          echo "Building Store MSIX package for ${{ inputs.name }} ${{ inputs.version }}"

          VERSION="${{ inputs.version }}"
          VERSION="${VERSION#v}"
          IFS='.' read -r a b c <<< "$VERSION"
          BUILD_NUMBER=0
          MSIX_VERSION="${a}.${b}.${c}.${BUILD_NUMBER}"

          dart run msix:create \
            -e "internetClient, privateNetworkClientServer" \
            -d "Open-App" \
            -l "assets/logo.png" \
            -u "${{ secrets.PARTNER_COMPANY }}" \
            -i "${{ secrets.PARTNER_APP }}" \
            --version "${MSIX_VERSION}" \
            --publisher "${{ secrets.PARTNER_CN }}" \
            --store true \
            --trim-logo false \
            --sign-msix false

      - name: move unsigned MSIX(Store)
        shell: bash
        run: |
          ls -lh build/windows/x64/runner/Release/*.msix
          mv build/windows/x64/runner/Release/*.msix "${{ inputs.name }}-windows-amd64-${{ inputs.version }}-store.msix"

      - uses: azure/trusted-signing-action@v0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: ${{ secrets.AZURE_TSA_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_PROFILE_NAME }}
          files-folder: build/windows/x64/runner/Release
          files-folder-filter: exe,dll
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256
        name: Sign Inner Flutter Files with Trusted Signing

      - name: Build MSIX package(Release)
        shell: bash
        run: |
          set -xeuo pipefail

          echo "Building MSIX package for ${{ inputs.name }} ${{ inputs.version }}"

          VERSION="${{ inputs.version }}"
          VERSION="${VERSION#v}"
          IFS='.' read -r a b c <<< "$VERSION"
          BUILD_NUMBER=0
          MSIX_VERSION="${a}.${b}.${c}.${BUILD_NUMBER}"

          dart run msix:create \
            -e "internetClient, privateNetworkClientServer" \
            -d "${{ inputs.name }}" \
            -l "assets/logo.png" \
            -u "${{ secrets.PARTNER_COMPANY }}" \
            -i "${{ secrets.PARTNER_APP }}" \
            --version "${MSIX_VERSION}" \
            --publisher "${{ secrets.AZURE_CN }}" \
            --trim-logo false \
            --sign-msix false

      - uses: azure/trusted-signing-action@v0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: ${{ secrets.AZURE_TSA_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_PROFILE_NAME }}
          files-folder: build/windows/x64/runner/Release
          files-folder-filter: msix
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256
        name: Sign MSIX File with Trusted Signing

      - name: move signed MSIX(Release)
        shell: bash
        run: |
          ls -lh build/windows/x64/runner/Release/*.msix
          mv build/windows/x64/runner/Release/*.msix "${{ inputs.name }}-windows-amd64-${{ inputs.version }}.msix"

      - name: Compress Windows app
        shell: bash
        run: |
          cd build/windows/x64/runner/Release
          powershell -Command "Compress-Archive -Path * -DestinationPath ../../../../../${{ inputs.name }}-windows-amd64-${{ inputs.version }}.zip"

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: Release ${{ inputs.version }}
          draft: false
          prerelease: false
          overwrite_files: true
          files: |
            ${{ inputs.name }}-windows-amd64-${{ inputs.version }}.zip
            ${{ inputs.name }}-windows-amd64-${{ inputs.version }}.msix
            ${{ inputs.name }}-windows-amd64-${{ inputs.version }}-store.msix
          body: |
            ## Windows Application for ${{ inputs.version }}

            ### Build Configuration
            - **Platform**: Windows
            - **Architecture**: amd64
            - **Build Type**: Release (Obfuscated)
            - **Code Obfuscation**: Enabled
            - **Debug Symbols**: Available as workflow artifact

            ### Installation
            Download and extract the zip file to run the application
