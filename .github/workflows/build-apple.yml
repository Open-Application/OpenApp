name: build-apple

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: 'App name'
      pkg:
        required: true
        type: string
        description: 'Package name'
      version:
        required: true
        type: string
        description: 'Version to build'


jobs:
  build-and-upload:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - platform: ios
            framework_dir: ios/Frameworks
          - platform: macos
            framework_dir: macos/Frameworks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download Deps lib
        shell: bash
        run: |
          set -xeuo pipefail

          LATEST_RELEASE=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" https://api.github.com/repos/${{ secrets.UPSTREAM_REPO }}/releases/latest | grep '"tag_name":' | cut -d'"' -f4)

          if [ -z "${LATEST_RELEASE}" ]; then
            echo "Error: Failed to fetch latest release tag"
            exit 1
          fi

          echo "Latest OpenCore release: ${LATEST_RELEASE}"

          DOWNLOAD_URL="https://github.com/${{ secrets.UPSTREAM_REPO }}/releases/download/${LATEST_RELEASE}/liboc-${{ matrix.platform }}-universal-${LATEST_RELEASE}.tar.gz"
          echo "Downloading from: ${DOWNLOAD_URL}"

          curl -L -H "Authorization: Bearer ${GITHUB_TOKEN}" -o liboc.tar.gz "${DOWNLOAD_URL}"
          mkdir -p ${{ matrix.framework_dir }}
          tar -xzf liboc.tar.gz -C ${{ matrix.framework_dir }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Set build environment
        run: |
          set -xeuo pipefail
          echo "BUILD_VERSION=${{ inputs.version }}" >> "${GITHUB_ENV}"

      - name: Install Flutter dependencies
        run: |
          flutter pub get

      - name: Check Flutter version
        run: |
          flutter --version

      - name: Install CocoaPods dependencies
        run: |
          cd ${{ matrix.platform }}
          pod install

      - name: Setup certificates and provisioning profiles
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/Certificates.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo "Creating keychain..."
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

          echo "Importing certificates..."
          echo -n "${{ secrets.CERTIFICATES_P12 }}" | base64 --decode -o $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "${{ secrets.P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          security set-key-partition-list -S apple-tool:,apple: -k "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          echo "Installing provisioning profiles..."
          PROFILES_ZIP_PATH=$RUNNER_TEMP/Profiles.zip
          echo -n "${{ secrets.PROVISIONING_PROFILES }}" | base64 --decode -o $PROFILES_ZIP_PATH

          PROFILES_PATH="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_PATH"
          unzip $PROFILES_ZIP_PATH -d "$PROFILES_PATH"

          echo "Setting up App Store Connect API key..."
          ASC_KEY_PATH=$RUNNER_TEMP/AuthKey.p8
          echo -n "${{ secrets.ASC_API_KEY }}" | base64 --decode -o $ASC_KEY_PATH

          echo "ASC_KEY_PATH=$ASC_KEY_PATH" >> "$GITHUB_ENV"
          echo "ASC_KEY_ID=${{ secrets.ASC_KEY_ID }}" >> "$GITHUB_ENV"
          echo "ASC_ISSUER_ID=${{ secrets.ASC_ISSUER_ID }}" >> "$GITHUB_ENV"

      - name: Build ${{ matrix.platform }} app
        run: |
          set -xeuo pipefail

          echo "Building ${{ inputs.name }} ${{ inputs.version }} (Release Mode)"
          rm -rf .dart_tool build/${{ matrix.platform }} ${{ matrix.platform }}/.Pods
          flutter gen-l10n
          flutter pub run flutter_launcher_icons

          if [ "${{ matrix.platform }}" == "ios" ]; then
            flutter build ipa --release \
                --obfuscate \
                --split-debug-info=debug-info/ios \
                --suppress-analytics \
                --no-tree-shake-icons \
                --export-options-plist=ios/ExportOptions.plist

            echo "Renaming IPA for release..."
            mv "build/ios/ipa/${{ inputs.name }}.ipa" "build/ios/ipa/${{ inputs.name }}-${{ inputs.version }}.ipa"
            echo "Release IPA created: ${{ inputs.name }}-${{ inputs.version }}.ipa"
            echo "UPLOAD_FILE=build/ios/ipa/${{ inputs.name }}-${{ inputs.version }}.ipa" >> "$GITHUB_ENV"
          else
            flutter build macos --release \
                --obfuscate \
                --split-debug-info=debug-info/macos \
                --suppress-analytics \
                --no-tree-shake-icons

            APP_PATH="build/macos/Build/Products/Release/${{ inputs.name }}.app"
            PKG_PATH="build/macos/${{ inputs.name }}-${{ inputs.version }}.pkg"

            echo "Creating PKG for App Store..."
            INSTALLER_CERT=$(security find-identity -v -p basic | grep "3rd Party Mac Developer Installer" | head -1 | awk -F'"' '{print $2}')
            productbuild --component "${APP_PATH}" /Applications --sign "$INSTALLER_CERT" "${PKG_PATH}"
            echo "Release PKG created: ${{ inputs.name }}-${{ inputs.version }}.pkg"
            echo "UPLOAD_FILE=$PKG_PATH" >> "$GITHUB_ENV"
          fi

      - name: Upload debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: debug-symbols-${{ matrix.platform }}
          path: debug-info/${{ matrix.platform }}
          retention-days: 90

      - name: Upload to App Store Connect
        run: |
          set -xeuo pipefail

          if [ "${{ matrix.platform }}" == "ios" ]; then
            PLATFORM_TYPE="ios"
          else
            PLATFORM_TYPE="macos"
          fi

          echo "Uploading $UPLOAD_FILE to App Store Connect..."
          xcrun altool --upload-app \
            --type $PLATFORM_TYPE \
            --file "$UPLOAD_FILE" \
            --apiKey "$ASC_KEY_ID" \
            --apiIssuer "$ASC_ISSUER_ID"

          echo "Upload completed successfully!"
